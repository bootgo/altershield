/*
 * MIT License
 *
 * Copyright (c) [2023]
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.alipay.altershield.defender.framework.exe.dal.mapper;

import com.alipay.altershield.defender.framework.exe.dal.dataobject.ExeDefenderDetectDO;
import com.alipay.altershield.defender.framework.exe.dal.dataobject.ExeDefenderDetectParam;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.List;

/**
 * This class was generated by Ali-Generator
 * @author yhaoxuan
 */
@Mapper
public interface ExeDefenderDetectMapper {

    /**
     * COUNT based on WHERE condition
     *
     * @param exeDefenderDetectParam
     * @return
     *
     * @mbg.generated
     */
    long countByParam(ExeDefenderDetectParam exeDefenderDetectParam);

    /**
     * Delete based on WHERE condition
     *
     * @param exeDefenderDetectParam
     * @return
     *
     * @mbg.generated
     */
    int deleteByParam(ExeDefenderDetectParam exeDefenderDetectParam);

    /**
     * Delete based on primary key
     *
     * @param detectExeId
     * @return
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(String detectExeId);

    /**
     * Insert a single record
     *
     * @param record
     * @return
     *
     * @mbg.generated
     */
    int insert(ExeDefenderDetectDO record);

    /**
     * Selectively insert a single record based on a field
     *
     * @param record
     * @return
     *
     * @mbg.generated
     */
    int insertSelective(ExeDefenderDetectDO record);

    /**
     * Query based on WHERE condition, return does not contain long text fields
     *
     * @param exeDefenderDetectParam
     * @return
     *
     * @mbg.generated
     */
    List<ExeDefenderDetectDO> selectByParam(ExeDefenderDetectParam exeDefenderDetectParam);

    /**
     * Query based on primary key
     *
     * @param detectExeId
     * @return
     *
     * @mbg.generated
     */
    ExeDefenderDetectDO selectByPrimaryKey(String detectExeId);

    /**
     * Selective update based on WHERE condition
     *
     * @param record
     * @param exeDefenderDetectParam
     * @return
     *
     * @mbg.generated
     */
    int updateByParamSelective(@Param("record") ExeDefenderDetectDO record, @Param("opsCloudExeDefenderDetectParam") ExeDefenderDetectParam exeDefenderDetectParam);

    /**
     * Update based on WHERE conditions, do not update long text fields
     *
     * @param record
     * @param exeDefenderDetectParam
     * @return
     *
     * @mbg.generated
     */
    int updateByParam(@Param("record") ExeDefenderDetectDO record, @Param("opsCloudExeDefenderDetectParam") ExeDefenderDetectParam exeDefenderDetectParam);

    /**
     * Selective update based on primary key
     *
     * @param record
     * @return
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(ExeDefenderDetectDO record);

    /**
     * Update by primary key
     *
     * @param record
     * @return
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(ExeDefenderDetectDO record);

    /**
     * Insert in batch
     *
     * @param records
     * @return
     *
     * @mbg.generated
     */
    int batchInsert(List<ExeDefenderDetectDO> records);

    /**
     * Update the row record based on the primary key id
     *
     * @param detectExeId detection execution id
     * @return entity
     */
    ExeDefenderDetectDO selectByPrimaryKeyForUpdate(@Param("id") String detectExeId);

    /**
     * Batch update verification entities ignore status
     *
     * @param detectExeIds detection ids
     * @param ignored whether the detection result is ignored or not. Y=ignoredï¼ŒN=not ignored
     * @return update columns
     */
    int batchUpdateByIds(@Param("detectExeIds") List<String> detectExeIds, @Param("ignored") String ignored);
}
